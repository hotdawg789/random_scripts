pipeline {
    agent any
    
    stages {
        stage('Invoke AWS Lambda Function') {
            when {
                // This condition matches any branch starting with 'release'
                branch pattern: "release*", comparator: "GLOB"
            }
            steps {
                script {
                    // Use git commands to get the commit hash
                    def commitHash = sh(script: 'git rev-parse HEAD', returnStdout: true).trim()
                    // Retrieve the branch name from the BRANCH_NAME environment variable
                    def branchName = env.BRANCH_NAME
                    echo "Branch name: ${branchName}"
                    echo "Commit hash for the current build: ${commitHash}"

                    // Construct the payload with both branch name and commit hash
                    def payload = "{\\\"branchName\\\":\\\"${branchName}\\\", \\\"commitHash\\\":\\\"${commitHash}\\\"}"

                    // Assuming AWS CLI is configured on the Jenkins agent
                    // Replace 'your_lambda_function_name' with your actual Lambda function name
                    // Pass the constructed payload for the Lambda invocation
                    sh """
                    aws lambda invoke \
                        --function-name your_lambda_function_name \
                        --payload '${payload}' \
                        response.json
                    """

                    // Optionally, print the Lambda function response stored in response.json
                    echo "Lambda function response:"
                    sh "cat response.json"
                }
            }
        }
    }

    post {
        always {
            // Clean-up actions, like deleting the temporary response.json file
            sh "rm -f response.json"
            echo "Clean-up complete."
        }
    }
}
